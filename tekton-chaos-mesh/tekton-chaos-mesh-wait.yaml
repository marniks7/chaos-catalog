apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
    name: chaos-mesh-wait-applied
    namespace: tekton-chaos-mesh
spec:
    description: Wait for Chaos Mesh experiment to finish
    params:
        - name: namespace
          description: Chaos Mesh experiment namespace
          type: string
        - name: type
          description: Chaos Mesh experiment type
          type: string
        - name: name
          description: Chaos Mesh experiment name
          type: string
        - name: image
          description: Used image, includes kubectl and yq
          default: marniks7/env
          type: string
        - name: timeout
          description: How long to wait for chaos experiment to become recovered
          default: 30s
    steps:
        - name: wait
          image: $(params.image)
          env:
              - name: NAMESPACE
                value: $(params.namespace)
              - name: TYPE
                value: $(params.type)
              - name: NAME
                value: $(params.name)
              - name: TIMEOUT
                value: $(params.timeout)
          script: |
            #!/usr/bin/env bash
            set -e
            [[ "$(workspaces.kubeconfig-dir.bound)" == "true" ]] && \
            [[ -f $(workspaces.kubeconfig-dir.path)/kubeconfig ]] && \
            export KUBECONFIG=$(workspaces.kubeconfig-dir.path)/kubeconfig
            kubectl get ${TYPE} ${NAME} --namespace ${NAMESPACE} -o yaml
            action=$(kubectl get ${TYPE} ${NAME} --namespace ${NAMESPACE} -o yaml | yq '.spec.action')
            echo "Action: ${action}"
            readarray targets < <(kubectl get ${TYPE} ${NAME} --namespace ${NAMESPACE} -o yaml | yq '.status.experiment.containerRecords[].id')
            echo "Targets: ${targets[@]}"
            if [[ "${action}" == "pod-kill" ]]; then
              for i in "${targets[@]}"
              do
                namespaceName=$(echo "${i}" | awk '{ print $1 }')
                podNamespace=${namespaceName%\/*}
                podName=${namespaceName#*\/}
                # TODO timeout should be total for everything
                kubectl wait --for=delete --namespace ${podNamespace} pod ${podName} --timeout=${TIMEOUT}
              done
            else
              kubectl wait --for=condition=AllInjected --timeout=${TIMEOUT} --namespace ${NAMESPACE} ${TYPE} ${NAME}
            fi
    workspaces:
        - name: kubeconfig-dir
          optional: true
